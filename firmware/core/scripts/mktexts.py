#!/usr/bin/env python3

import argparse
import json
import os
import typing
from pathlib import Path


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--in", action="store", required=True, dest="input", help="Input JSON file")
    parser.add_argument("--src", action="store", required=True, dest="c_file", help="Output C source file")
    parser.add_argument("--hdr", action="store", required=True, dest="h_file", help="Output C header")
    params = parser.parse_args()

    c_path = Path(params.c_file)
    h_path = Path(params.h_file)

    with open(params.input, "r") as fp:
        string_db = json.load(fp)["strings"]

    os.makedirs(c_path.parent, exist_ok=True)
    with open(c_path, "w") as cfp:
        make_c_source(string_db, cfp, h_path)

    os.makedirs(h_path.parent, exist_ok=True)
    with open(h_path, "w") as hfp:
        make_c_header(string_db, hfp, h_path)


def make_c_source(strings: typing.List[typing.Any],
                  fp: typing.IO,
                  header: Path):
    print("// autogenerated by mktexts.py", file=fp)
    print("// DO NOT EDIT MANUALLY. ALL YOUR CHANGES WILL BE LOST!", file=fp)
    print(file=fp)
    print(f"#include \"{header.name}\"", file=fp)
    print(file=fp)
    print("//! string values", file=fp)
    print(f"const char *UiStrings[TXT_STRING_COUNT] = {{", file=fp)
    for item in strings:
        print(f'    [{item["name"]}] = "{item["value"]}",', file=fp)
    print("};", file=fp)


def make_c_header(strings: typing.List[typing.Any],
                  fp: typing.IO,
                  header: Path):
    guard_name = f"NXT3_{header.stem.upper()}_GENERATED_H"
    print("// autogenerated by mktexts.py", file=fp)
    print("// DO NOT EDIT MANUALLY. ALL YOUR CHANGES WILL BE LOST!", file=fp)
    print(f"#ifndef {guard_name}", file=fp)
    print(f"#define {guard_name}", file=fp)
    print(file=fp)
    print("//! strings indices", file=fp)
    print("enum {", file=fp)
    for item in strings:
        print(f"    {item['name']},", file=fp)
    print("    TXT_STRING_COUNT,", file=fp)
    print("};", file=fp)
    print(file=fp)
    print("//! string values", file=fp)
    print(f"extern const char *UiStrings[TXT_STRING_COUNT];", file=fp)
    print(file=fp)
    print(f"#endif // {guard_name}", file=fp)


if __name__ == '__main__':
    main()
