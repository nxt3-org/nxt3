#!/usr/bin/env python3

import argparse
import json
import os
import struct
import typing
from pathlib import Path
from utils.imagepipe import write_c_bytes


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", action="store", required=False, dest="input",
                        help="Manu definition")
    parser.add_argument("-m", action="store", required=False, dest="icons",
                        help="Icon definitions")
    parser.add_argument("-e", action="store", required=True, dest="enums",
                        help="Common enum definitions")
    parser.add_argument("-o", action="store", required=True, dest="output",
                        help="Output C header")
    params = parser.parse_args()

    dst = Path(params.output)
    with open(Path(params.enums), "r") as fp:
        enum_db = json.load(fp)

    os.makedirs(dst.parent, exist_ok=True)
    if params.input is None:
        with open(dst, "w") as fp:
            compile_enums(enum_db, fp)
    else:
        with open(Path(params.input), "r") as fp:
            menu_db = json.load(fp)
        with open(Path(params.icons), "r") as fp:
            icon_db = json.load(fp)["icon"]
        compile_menus_c(menu_db, icon_db, enum_db, dst)


def compile_enums(enum_db: typing.Any, fp: typing.IO):
    print("// Menu enums autogenerated by mkmenu.py", file=fp)
    print("// DO NOT EDIT MANUALLY. ALL YOUR CHANGES WILL BE LOST!", file=fp)
    print("#ifndef NXT3_MENU_COMMON_H", file=fp)
    print("#define NXT3_MENU_COMMON_H", file=fp)
    print(file=fp)
    compile_one_enum("MENU_FLAGS", "Menu state flags", enum_db["flags"], fp)
    compile_one_enum("FUNC_PARAMS", "Menu functions parameters", enum_db["parameters"], fp)
    compile_one_enum("FUNC_NO", "Menu function/handler indices", enum_db["functions"], fp)
    compile_function_table("Functions", "Menu function/handler array", enum_db["functions"], fp)
    print("#endif // NXT3_MENU_COMMON_H", file=fp)


def compile_one_enum(name: str,
                     doc: str,
                     items: typing.List[typing.Any],
                     fp: typing.IO):
    print(f"//! {doc}", file=fp)
    print(f"enum {name} {{", file=fp)
    for item in items:
        print(f"  {item['id']} = {item['value']}, //!< {item['doc']}", file=fp)
    if name == 'FUNC_NO':
        print("  FUNC_NO_MAX", file=fp)
    print("};", file=fp)
    print(file=fp)


def compile_function_table(name: str,
                           doc: str,
                           items: typing.List[typing.Any],
                           fp: typing.IO):
    for item in items:
        if "func" not in item:
            continue
        print(f"extern unsigned char {item['func']}(unsigned char); //!< {item['doc']}", file=fp)
    print(file=fp)
    print("typedef unsigned char (*menu_fn)(unsigned char);", file=fp)
    print(file=fp)
    print("#ifdef INCLUDE_OS", file=fp)
    print(f"//! {doc}", file=fp)
    print(f"extern const menu_fn {name}[FUNC_NO_MAX];", file=fp)
    print(file=fp)
    print("#else // INCLUDE_OS", file=fp)
    print(f"//! {doc}", file=fp)
    print(f"const menu_fn {name}[FUNC_NO_MAX] = {{", file=fp)
    for item in items:
        value = "NULL" if ("func" not in item) else f"&{item['func']}"
        print(f"  [{item['id']}] = {value}, //!< {item['doc']}", file=fp)
    print("};", file=fp)
    print("#endif // INCLUDE_OS", file=fp)
    print(file=fp)


def compile_menus_c(menu_db: typing.Any,
                    icon_db: typing.Any,
                    enum_db: typing.Any,
                    dst: Path):
    raw = compile_menus_binary(menu_db, icon_db, enum_db)
    with open(dst, "w") as fp:
        print(f"const unsigned char {dst.stem}[] = {{", file=fp)
        write_c_bytes(fp, raw, 0, 8)
        for start in range(8, len(raw), 29):
            write_c_bytes(fp, raw, start, 29)
        print(f"}};", file=fp)


def compile_menus_binary(menu_db: typing.Any,
                         icon_db: typing.Any,
                         enum_db: typing.Any):
    total_menus = count_menus(menu_db) - 1  # top-level is not a menu
    raw = bytearray(8 + 29 * total_menus)
    struct.pack_into(
        ">HHBBBB", raw, 0,
        0x0700,
        29 * total_menus,
        29, total_menus,
        icon_db["icon_width"],
        icon_db["icon_height"]
    )
    ptr = 8
    index = 1
    for item in menu_db['menus']:
        ptr = write_menu(ptr, raw, 0, 0, index, item, icon_db, enum_db)
        index += 1
    assert (ptr == len(raw))
    return raw


def write_menu(pointer: int,
               raw: bytearray,
               parent_id: int,
               this_depth: int,
               this_num: int,
               item: typing.Any,
               icon_db: typing.Any,
               enum_db: typing.Any):
    this_id = item.get("id", None)
    if this_id is None:
        this_id = parent_id | (this_num << (4 * this_depth))
    else:
        this_id = int(this_id, 16)

    alt_depth = item.get("depth", None)
    if alt_depth is not None:
        this_depth = alt_depth
    if not item.get("virtual", False):
        pointer = write_one_menu(pointer, raw, this_id, item, icon_db, enum_db)
    children = [] if ("menus" not in item) else (item['menus'])
    index = 1
    for child in children:
        pointer = write_menu(pointer, raw, this_id, this_depth + 1, index, child, icon_db, enum_db)
        index += 1
    return pointer


def write_one_menu(pointer: int,
                   raw: bytearray,
                   this_id: int,
                   item: typing.Any,
                   icon_db: typing.Any,
                   enum_db: typing.Any):
    this_flags = resolve_flags(item.get("flags", []), enum_db["flags"])
    this_func = resolve_common_enum(item.get("function", None), enum_db["functions"])
    this_param = resolve_common_enum(item.get("parameter", None), enum_db["parameters"])
    this_next_file = item.get("next_file", 0)
    this_next_menu = item["next_menu"]
    if this_next_menu == "parent":
        this_next_menu = 0
    this_label = item.get("label", "")
    this_icon = resolve_icon(item.get("icon", None), icon_db["items"])

    struct.pack_into(
        ">IIBBBB16sB", raw, pointer,
        this_id,
        this_flags,
        this_func,
        this_param,
        this_next_file,
        this_next_menu,
        this_label.encode("utf-8"),
        this_icon
    )
    return pointer + 29


def resolve_flags(specified: typing.List[typing.Any],
                  enum_list: typing.List[typing.Any]):
    mask = 0
    ptr = iter(specified)
    for identifier in ptr:
        if not isinstance(identifier, str):
            raise ValueError(f"Unexpected non-string flag: {identifier}")
        enum = resolve_enum_core(identifier, enum_list, "id")
        if "arg" in enum:
            try:
                mask |= next(ptr) << (4 * enum["arg"])
            except StopIteration:
                raise ValueError(f"Expected argument for flag {identifier}")
        mask |= int(enum["value"], 16)
    return mask


def resolve_common_enum(specified: typing.Any,
                        enum_list: typing.List[typing.Any]):
    tmp = resolve_enum_core(specified, enum_list, "id")
    if isinstance(tmp, int):
        return tmp
    else:
        return int(tmp["value"], 16)


def resolve_icon(specified: typing.Any,
                 enum_list: typing.List[typing.Any]):
    tmp = resolve_enum_core(specified, enum_list, "id")
    if isinstance(tmp, int):
        return tmp
    else:
        return tmp["index"]


def resolve_enum_core(specified: typing.Any,
                      enum_list: typing.List[typing.Any],
                      enum_key_name: str):
    if specified is None:
        return 0
    if isinstance(specified, int):
        return specified

    for item in enum_list:
        if item[enum_key_name] == specified:
            return item
    else:
        raise ValueError(f"Cannot decode enum value '{specified}'")


def count_menus(parent: typing.Any):
    if not parent.get("virtual", False):
        sub_sum = 1
    else:
        sub_sum = 0
    for item in parent.get("menus", []):
        sub_sum += count_menus(item)
    return sub_sum


if __name__ == '__main__':
    main()
